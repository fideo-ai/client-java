/*
 * Fideo API
 * This is a representation of the Fideo API based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). Some useful links: - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@fideo.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.fideo.model;

import java.util.Objects;
import ai.fideo.model.IPCountry;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.fideo.client.JSON;

/**
 * Evidence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-01T10:34:47.407093-04:00[America/New_York]", comments = "Generator version: 7.6.0")
public class Evidence {
  public static final String SERIALIZED_NAME_IP_TOR = "ipTor";
  @SerializedName(SERIALIZED_NAME_IP_TOR)
  private Boolean ipTor;

  public static final String SERIALIZED_NAME_IP_COUNTRY = "ipCountry";
  @SerializedName(SERIALIZED_NAME_IP_COUNTRY)
  private IPCountry ipCountry;

  public static final String SERIALIZED_NAME_COUNTRY_OF_IP = "countryOfIp";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_IP)
  private String countryOfIp;

  public Evidence() {
  }

  public Evidence ipTor(Boolean ipTor) {
    this.ipTor = ipTor;
    return this;
  }

   /**
   * Get ipTor
   * @return ipTor
  **/
  @javax.annotation.Nullable
  public Boolean getIpTor() {
    return ipTor;
  }

  public void setIpTor(Boolean ipTor) {
    this.ipTor = ipTor;
  }


  public Evidence ipCountry(IPCountry ipCountry) {
    this.ipCountry = ipCountry;
    return this;
  }

   /**
   * Get ipCountry
   * @return ipCountry
  **/
  @javax.annotation.Nullable
  public IPCountry getIpCountry() {
    return ipCountry;
  }

  public void setIpCountry(IPCountry ipCountry) {
    this.ipCountry = ipCountry;
  }


  public Evidence countryOfIp(String countryOfIp) {
    this.countryOfIp = countryOfIp;
    return this;
  }

   /**
   * Get countryOfIp
   * @return countryOfIp
  **/
  @javax.annotation.Nullable
  public String getCountryOfIp() {
    return countryOfIp;
  }

  public void setCountryOfIp(String countryOfIp) {
    this.countryOfIp = countryOfIp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Evidence evidence = (Evidence) o;
    return Objects.equals(this.ipTor, evidence.ipTor) &&
        Objects.equals(this.ipCountry, evidence.ipCountry) &&
        Objects.equals(this.countryOfIp, evidence.countryOfIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipTor, ipCountry, countryOfIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Evidence {\n");
    sb.append("    ipTor: ").append(toIndentedString(ipTor)).append("\n");
    sb.append("    ipCountry: ").append(toIndentedString(ipCountry)).append("\n");
    sb.append("    countryOfIp: ").append(toIndentedString(countryOfIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipTor");
    openapiFields.add("ipCountry");
    openapiFields.add("countryOfIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Evidence
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Evidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Evidence is not found in the empty JSON string", Evidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Evidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Evidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ipCountry`
      if (jsonObj.get("ipCountry") != null && !jsonObj.get("ipCountry").isJsonNull()) {
        IPCountry.validateJsonElement(jsonObj.get("ipCountry"));
      }
      if ((jsonObj.get("countryOfIp") != null && !jsonObj.get("countryOfIp").isJsonNull()) && !jsonObj.get("countryOfIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOfIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOfIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Evidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Evidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Evidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Evidence.class));

       return (TypeAdapter<T>) new TypeAdapter<Evidence>() {
           @Override
           public void write(JsonWriter out, Evidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Evidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Evidence given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Evidence
  * @throws IOException if the JSON string is invalid with respect to Evidence
  */
  public static Evidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Evidence.class);
  }

 /**
  * Convert an instance of Evidence to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

