/*
 * Fideo API
 * Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support@fideo.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.fideo.model;

import java.util.Objects;
import ai.fideo.model.LocationReq;
import ai.fideo.model.MultiFieldReq;
import ai.fideo.model.PersonNameReq;
import ai.fideo.model.SocialProfileReq;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.fideo.client.JSON;

/**
 * MultiFieldReqWithOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class MultiFieldReqWithOptions extends MultiFieldReq {
  public static final String SERIALIZED_NAME_INFER = "infer";
  @SerializedName(SERIALIZED_NAME_INFER)
  private Boolean infer;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private String confidence = "LOW";

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private String birthday;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<String> countries;

  public static final String SERIALIZED_NAME_EXCLUDED_COUNTRIES = "excludedCountries";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_COUNTRIES)
  private List<String> excludedCountries;

  public MultiFieldReqWithOptions() {
  }

  public MultiFieldReqWithOptions infer(Boolean infer) {
    this.infer = infer;
    return this;
  }

  /**
   * Get infer
   * @return infer
   */
  @javax.annotation.Nullable
  public Boolean getInfer() {
    return infer;
  }

  public void setInfer(Boolean infer) {
    this.infer = infer;
  }


  public MultiFieldReqWithOptions confidence(String confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Get confidence
   * @return confidence
   */
  @javax.annotation.Nullable
  public String getConfidence() {
    return confidence;
  }

  public void setConfidence(String confidence) {
    this.confidence = confidence;
  }


  public MultiFieldReqWithOptions birthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * Get birthday
   * @return birthday
   */
  @javax.annotation.Nullable
  public String getBirthday() {
    return birthday;
  }

  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }


  public MultiFieldReqWithOptions ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public MultiFieldReqWithOptions countries(List<String> countries) {
    this.countries = countries;
    return this;
  }

  public MultiFieldReqWithOptions addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * Get countries
   * @return countries
   */
  @javax.annotation.Nullable
  public List<String> getCountries() {
    return countries;
  }

  public void setCountries(List<String> countries) {
    this.countries = countries;
  }


  public MultiFieldReqWithOptions excludedCountries(List<String> excludedCountries) {
    this.excludedCountries = excludedCountries;
    return this;
  }

  public MultiFieldReqWithOptions addExcludedCountriesItem(String excludedCountriesItem) {
    if (this.excludedCountries == null) {
      this.excludedCountries = new ArrayList<>();
    }
    this.excludedCountries.add(excludedCountriesItem);
    return this;
  }

  /**
   * Get excludedCountries
   * @return excludedCountries
   */
  @javax.annotation.Nullable
  public List<String> getExcludedCountries() {
    return excludedCountries;
  }

  public void setExcludedCountries(List<String> excludedCountries) {
    this.excludedCountries = excludedCountries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiFieldReqWithOptions multiFieldReqWithOptions = (MultiFieldReqWithOptions) o;
    return Objects.equals(this.infer, multiFieldReqWithOptions.infer) &&
        Objects.equals(this.confidence, multiFieldReqWithOptions.confidence) &&
        Objects.equals(this.birthday, multiFieldReqWithOptions.birthday) &&
        Objects.equals(this.ipAddress, multiFieldReqWithOptions.ipAddress) &&
        Objects.equals(this.countries, multiFieldReqWithOptions.countries) &&
        Objects.equals(this.excludedCountries, multiFieldReqWithOptions.excludedCountries) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(infer, confidence, birthday, ipAddress, countries, excludedCountries, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiFieldReqWithOptions {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    infer: ").append(toIndentedString(infer)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    excludedCountries: ").append(toIndentedString(excludedCountries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("twitter");
    openapiFields.add("linkedin");
    openapiFields.add("recordId");
    openapiFields.add("personId");
    openapiFields.add("partnerId");
    openapiFields.add("location");
    openapiFields.add("avatar");
    openapiFields.add("website");
    openapiFields.add("title");
    openapiFields.add("organization");
    openapiFields.add("emails");
    openapiFields.add("phones");
    openapiFields.add("profiles");
    openapiFields.add("maids");
    openapiFields.add("name");
    openapiFields.add("partnerKeys");
    openapiFields.add("li_nonid");
    openapiFields.add("panoramaId");
    openapiFields.add("placekey");
    openapiFields.add("generatePid");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("profile");
    openapiFields.add("maid");
    openapiFields.add("infer");
    openapiFields.add("confidence");
    openapiFields.add("birthday");
    openapiFields.add("ipAddress");
    openapiFields.add("countries");
    openapiFields.add("excludedCountries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiFieldReqWithOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiFieldReqWithOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiFieldReqWithOptions is not found in the empty JSON string", MultiFieldReqWithOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiFieldReqWithOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiFieldReqWithOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) && !jsonObj.get("confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidence").toString()));
      }
      if ((jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) && !jsonObj.get("birthday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull() && !jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedCountries") != null && !jsonObj.get("excludedCountries").isJsonNull() && !jsonObj.get("excludedCountries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedCountries` to be an array in the JSON string but got `%s`", jsonObj.get("excludedCountries").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiFieldReqWithOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiFieldReqWithOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiFieldReqWithOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiFieldReqWithOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiFieldReqWithOptions>() {
           @Override
           public void write(JsonWriter out, MultiFieldReqWithOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiFieldReqWithOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiFieldReqWithOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiFieldReqWithOptions
   * @throws IOException if the JSON string is invalid with respect to MultiFieldReqWithOptions
   */
  public static MultiFieldReqWithOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiFieldReqWithOptions.class);
  }

  /**
   * Convert an instance of MultiFieldReqWithOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

