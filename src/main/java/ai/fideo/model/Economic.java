/*
 * Fideo API
 * Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support@fideo.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.fideo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.fideo.client.JSON;

/**
 * Economic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class Economic {
  public static final String SERIALIZED_NAME_DWELLING_TYPE = "dwellingType";
  @SerializedName(SERIALIZED_NAME_DWELLING_TYPE)
  private String dwellingType;

  public static final String SERIALIZED_NAME_HOME_OWNERSHIP = "homeOwnership";
  @SerializedName(SERIALIZED_NAME_HOME_OWNERSHIP)
  private String homeOwnership;

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "maritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private String maritalStatus;

  public static final String SERIALIZED_NAME_PRESENCE_OF_CHILDREN = "presenceOfChildren";
  @SerializedName(SERIALIZED_NAME_PRESENCE_OF_CHILDREN)
  private String presenceOfChildren;

  public static final String SERIALIZED_NAME_INCOME = "income";
  @SerializedName(SERIALIZED_NAME_INCOME)
  private String income;

  public static final String SERIALIZED_NAME_NET_WORTH = "netWorth";
  @SerializedName(SERIALIZED_NAME_NET_WORTH)
  private String netWorth;

  public Economic() {
  }

  public Economic dwellingType(String dwellingType) {
    this.dwellingType = dwellingType;
    return this;
  }

  /**
   * Get dwellingType
   * @return dwellingType
   */
  @javax.annotation.Nullable
  public String getDwellingType() {
    return dwellingType;
  }

  public void setDwellingType(String dwellingType) {
    this.dwellingType = dwellingType;
  }


  public Economic homeOwnership(String homeOwnership) {
    this.homeOwnership = homeOwnership;
    return this;
  }

  /**
   * Get homeOwnership
   * @return homeOwnership
   */
  @javax.annotation.Nullable
  public String getHomeOwnership() {
    return homeOwnership;
  }

  public void setHomeOwnership(String homeOwnership) {
    this.homeOwnership = homeOwnership;
  }


  public Economic maritalStatus(String maritalStatus) {
    this.maritalStatus = maritalStatus;
    return this;
  }

  /**
   * Get maritalStatus
   * @return maritalStatus
   */
  @javax.annotation.Nullable
  public String getMaritalStatus() {
    return maritalStatus;
  }

  public void setMaritalStatus(String maritalStatus) {
    this.maritalStatus = maritalStatus;
  }


  public Economic presenceOfChildren(String presenceOfChildren) {
    this.presenceOfChildren = presenceOfChildren;
    return this;
  }

  /**
   * Get presenceOfChildren
   * @return presenceOfChildren
   */
  @javax.annotation.Nullable
  public String getPresenceOfChildren() {
    return presenceOfChildren;
  }

  public void setPresenceOfChildren(String presenceOfChildren) {
    this.presenceOfChildren = presenceOfChildren;
  }


  public Economic income(String income) {
    this.income = income;
    return this;
  }

  /**
   * Get income
   * @return income
   */
  @javax.annotation.Nullable
  public String getIncome() {
    return income;
  }

  public void setIncome(String income) {
    this.income = income;
  }


  public Economic netWorth(String netWorth) {
    this.netWorth = netWorth;
    return this;
  }

  /**
   * Get netWorth
   * @return netWorth
   */
  @javax.annotation.Nullable
  public String getNetWorth() {
    return netWorth;
  }

  public void setNetWorth(String netWorth) {
    this.netWorth = netWorth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Economic economic = (Economic) o;
    return Objects.equals(this.dwellingType, economic.dwellingType) &&
        Objects.equals(this.homeOwnership, economic.homeOwnership) &&
        Objects.equals(this.maritalStatus, economic.maritalStatus) &&
        Objects.equals(this.presenceOfChildren, economic.presenceOfChildren) &&
        Objects.equals(this.income, economic.income) &&
        Objects.equals(this.netWorth, economic.netWorth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dwellingType, homeOwnership, maritalStatus, presenceOfChildren, income, netWorth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Economic {\n");
    sb.append("    dwellingType: ").append(toIndentedString(dwellingType)).append("\n");
    sb.append("    homeOwnership: ").append(toIndentedString(homeOwnership)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    presenceOfChildren: ").append(toIndentedString(presenceOfChildren)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    netWorth: ").append(toIndentedString(netWorth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dwellingType");
    openapiFields.add("homeOwnership");
    openapiFields.add("maritalStatus");
    openapiFields.add("presenceOfChildren");
    openapiFields.add("income");
    openapiFields.add("netWorth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Economic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Economic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Economic is not found in the empty JSON string", Economic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Economic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Economic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dwellingType") != null && !jsonObj.get("dwellingType").isJsonNull()) && !jsonObj.get("dwellingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dwellingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dwellingType").toString()));
      }
      if ((jsonObj.get("homeOwnership") != null && !jsonObj.get("homeOwnership").isJsonNull()) && !jsonObj.get("homeOwnership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeOwnership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeOwnership").toString()));
      }
      if ((jsonObj.get("maritalStatus") != null && !jsonObj.get("maritalStatus").isJsonNull()) && !jsonObj.get("maritalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maritalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maritalStatus").toString()));
      }
      if ((jsonObj.get("presenceOfChildren") != null && !jsonObj.get("presenceOfChildren").isJsonNull()) && !jsonObj.get("presenceOfChildren").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presenceOfChildren` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presenceOfChildren").toString()));
      }
      if ((jsonObj.get("income") != null && !jsonObj.get("income").isJsonNull()) && !jsonObj.get("income").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `income` to be a primitive type in the JSON string but got `%s`", jsonObj.get("income").toString()));
      }
      if ((jsonObj.get("netWorth") != null && !jsonObj.get("netWorth").isJsonNull()) && !jsonObj.get("netWorth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `netWorth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("netWorth").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Economic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Economic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Economic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Economic.class));

       return (TypeAdapter<T>) new TypeAdapter<Economic>() {
           @Override
           public void write(JsonWriter out, Economic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Economic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Economic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Economic
   * @throws IOException if the JSON string is invalid with respect to Economic
   */
  public static Economic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Economic.class);
  }

  /**
   * Convert an instance of Economic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

