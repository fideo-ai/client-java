/*
 * Fideo API
 * This is a representation of the Fideo API based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). Some useful links: - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@fideo.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.fideo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.fideo.client.JSON;

/**
 * ScoreDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class ScoreDetails {
  public static final String SERIALIZED_NAME_SCORER = "scorer";
  @SerializedName(SERIALIZED_NAME_SCORER)
  private String scorer;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private Map<String, Object> evidence = new HashMap<>();

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public ScoreDetails() {
  }

  public ScoreDetails scorer(String scorer) {
    this.scorer = scorer;
    return this;
  }

   /**
   * Get scorer
   * @return scorer
  **/
  @javax.annotation.Nullable
  public String getScorer() {
    return scorer;
  }

  public void setScorer(String scorer) {
    this.scorer = scorer;
  }


  public ScoreDetails score(Double score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  public ScoreDetails evidence(Map<String, Object> evidence) {
    this.evidence = evidence;
    return this;
  }

  public ScoreDetails putEvidenceItem(String key, Object evidenceItem) {
    if (this.evidence == null) {
      this.evidence = new HashMap<>();
    }
    this.evidence.put(key, evidenceItem);
    return this;
  }

   /**
   * Get evidence
   * @return evidence
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getEvidence() {
    return evidence;
  }

  public void setEvidence(Map<String, Object> evidence) {
    this.evidence = evidence;
  }


  public ScoreDetails weight(Double weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreDetails scoreDetails = (ScoreDetails) o;
    return Objects.equals(this.scorer, scoreDetails.scorer) &&
        Objects.equals(this.score, scoreDetails.score) &&
        Objects.equals(this.evidence, scoreDetails.evidence) &&
        Objects.equals(this.weight, scoreDetails.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scorer, score, evidence, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreDetails {\n");
    sb.append("    scorer: ").append(toIndentedString(scorer)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scorer");
    openapiFields.add("score");
    openapiFields.add("evidence");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ScoreDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreDetails is not found in the empty JSON string", ScoreDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scorer") != null && !jsonObj.get("scorer").isJsonNull()) && !jsonObj.get("scorer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scorer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scorer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreDetails>() {
           @Override
           public void write(JsonWriter out, ScoreDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScoreDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScoreDetails
  * @throws IOException if the JSON string is invalid with respect to ScoreDetails
  */
  public static ScoreDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreDetails.class);
  }

 /**
  * Convert an instance of ScoreDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

